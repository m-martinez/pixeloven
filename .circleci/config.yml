# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

# Reusable commands
commands:
  compile:
    description: "Compiling"
    parameters:
      type:
        type: string
    steps:
      - run:
          name: Compile source
          command: yarn compile-<< parameters.type >>
      - persist_to_workspace:
          root: .
          paths: 
            - << parameters.type >>/**/dist
  document:
    description: "Documenting"
    parameters:
      type:
        type: string
    steps:
      - run:
          name: Documenting source
          command: yarn document-<< parameters.type >>
      - persist_to_workspace:
          root: .
          paths: 
            - << parameters.type >>/**/docs
  lint:
    description: "Linting"
    parameters:
      type:
        type: string
    steps:
      - run:
          name: Linting source
          command: yarn lint-<< parameters.type >>
  test:
    description: "Testing"
    parameters:
      type:
        type: string
    steps:
      - run:
          name: Test source
          command: yarn test-<< parameters.type >>
      - persist_to_workspace:
          root: .
          paths: 
            - << parameters.type >>/**/coverage
  list:
    description: "List directory contents"
    parameters:
      path:
        type: string
        default: "."
    steps:
      - run:
          name: "List Directory"
          command: ls -al << parameters.path >>
  yarn:
    description: "Excutes yarn cmds"
    parameters:
      method:
        type: string
    steps:
      - run:
          name: yarn << parameters.method >>
          command: yarn << parameters.method >>

# Common executor for node based jobs
executors:
  node-executor:
    docker:
      - image: circleci/node:10.15
    working_directory: ~/pixeloven


# Define jobs
jobs:
  setup:
    executor: node-executor
    steps:
      # @todo We should create a custom docker image with lerna installed or find a way to add lerna to the executor
      # @todo We should cache node_modules perhaps cache key for each package.json
      - checkout
      - yarn:
          method: "install"

      # Save project
      - persist_to_workspace:
          root: .
          paths: 
            - .
  compile-examples:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - compile:
          type: "examples"

  compile-packages:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - compile:
          type: "packages"
  compile-tools:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - compile:
          type: "tools"
  lint-examples:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - lint:
          type: "examples"
  lint-packages:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - lint:
          type: "packages"
  lint-tools:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - lint:
          type: "tools"
  test-examples:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - test:
          type: "examples"

  test-packages:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - test:
          type: "packages"
  test-tools:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - test:
          type: "tools"
  build-examples:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - run:
          name: Create .env file
          command: yarn env:production
      - run:
          name: Build source
          command: yarn build
      - persist_to_workspace:
          root: .
          paths: 
            - examples/**/dist
  document-examples:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - document:
          type: "examples"
  document-packages:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - document:
          type: "packages"
  document-tools:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven
      - document:
          type: "tools"
  report:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/pixeloven

      # Check for coverage files for reporting
      - list:
          path: examples/**/coverage/lcov.info
      - list:
          path: packages/**/coverage/lcov.info
      - list:
          path: tools/**/coverage/lcov.info

      # Run test and report
      - run:
          name: Report source
          command: yarn report-coverage
  deploy:
    executor: node-executor
    steps:

      - attach_workspace:
          at: ~/pixeloven

      # Check for compiled & build files
      - list:
          path: examples/**/dist
      - list:
          path: packages/**/dist
      - list:
          path: tools/**/dist

       # Save dist artifacts
      - store_artifacts:
          path: packages/**/dist
          destination: packages/dist
      - store_artifacts:
          path: examples/**/dist
          destination: examples/dist
      - store_artifacts:
          path: tools/**/dist
          destination: tools/dist

      # Check for compiled & build files
      - list:
          path: examples/**/coverage
      - list:
          path: packages/**/coverage
      - list:
          path: tools/**/coverage

       # Save coverage artifacts
      - store_artifacts:
          path: packages/**/coverage
          destination: packages/coverage
      - store_artifacts:
          path: examples/**/coverage
          destination: examples/coverage
      - store_artifacts:
          path: tools/**/coverage
          destination: examples/coverage

      # Check for compiled & build files
      - list:
          path: examples/**/docs
      - list:
          path: packages/**/docs
      - list:
          path: tools/**/docs

      # Save docs artifacts
      - store_artifacts:
          path: packages/**/docs
          destination: packages/docs
      - store_artifacts:
          path: examples/**/docs
          destination: examples/docs
      - store_artifacts:
          path: tools/**/docs
          destination: examples/docs

      # @todo generate docs and run newly compiled tool to deploy to github pages
      # doc gen might be it's own job though

      # @todo need to do this https://github.com/atlassian/lerna-semantic-release
      # @todo would be nice to also deploy the above to a special branch for github
      # https://blog.frederikring.com/articles/deploying-github-pages-circle-ci/
      # should add the typedocs as well.

workflows:
  version: 2.1
  runner:
    jobs:
      - setup:
          filters:
            branches:
              ignore: gh-pages
      - compile-packages:
          requires:
            - setup
      - document-packages:
          requires:
            - setup
      - lint-packages:
          requires:
            - setup
      - test-packages:
          requires:
            - setup
      - build-examples:
          requires:
            - compile-packages
      - compile-examples:
          requires:
            - compile-packages
      - document-examples:
          requires:
            - compile-packages
      - lint-examples:
          requires:
            - compile-packages
      - test-examples:
          requires:
            - compile-packages
      - report:
          requires:
            - test-packages
            - test-examples
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - report
          filters:
            branches:
              only: master
